#!/usr/bin/python3

#By Lars-Martin Hejll
#http://softwarefun.org
#windData.py
#collects wind speed and direction
#Using Weather Sensor Assembly p/n 80422 Imported by Argent Data Systems
#from sparkfun.com
# one RPS = 1.492 MPH of wind rfactor (datasheet)

from time import sleep
import time
import RPi.GPIO as GPIO, time, os
import pymysql
pymysql.install_as_MySQLdb()

DEBUG = 0
counter = 0.0
finishtime = 0

rfactor = 1.492 #arbitrary factor, will change when the anemometer is calibrated in the wind tunnel
samples = 3 #arbitrary number of samples, needs to be precised
speed = 0.0
directionPin = 25 # corresponds to the pin 29 on the Raspberry GPIO
speedPin = 5 # corresponds to the pin 22 on the Raspberry GPIO
state = False

#setup GPIO's
GPIO.setmode(GPIO.BCM)
GPIO.setup(speedPin, GPIO.IN, pull_up_down=GPIO.PUD_UP)
#direction wil be switched between in/out (RC circuit)

#MySQL setup
conn = pymysql.connect("localhost","root","Australia57","WeatherData")
c = conn.cursor()

# The following code defines the functions that will be used by the two parts of this sensor : the Wind Vane and the Anemometer

# WindVane code
def getDirection ():
        reading = 0
        GPIO.setup(directionPin, GPIO.OUT)
        GPIO.output(directionPin, GPIO.LOW)
        time.sleep(0.1)

        GPIO.setup(directionPin, GPIO.IN)
        # This takes about 1 millisecond p/loop
        while (GPIO.input(directionPin) == GPIO.LOW):
                reading += 1
        #these readings come from the calibration the creator of the code did with his own setup. They will change when the Wind Vane is calibrated. 
        if (reading > 189 and reading < 230):
                return ("North")
        elif (reading > 110 and reading < 190):
                return ("NorthWest")
        elif (reading > 45 and reading < 60):
                return ("West")
        elif (reading > 330 and reading < 470):
                return ("SouthWest")
        elif (reading > 1600 and reading < 2200):
                return ("South")
        elif (reading > 2300 and reading < 4500):
                return ("SouthEast")
        elif (reading > 5600 and reading < 6800):
                return ("East")
        elif (reading > 750 and reading < 950):
                return ("NorthEast")
        else:
                return(reading)

# Anemometer code
def getSpeed():
#    Loop some seconds (samples) and record pulses

	counter = 0.0 #numbers of interrupt
	# finishtime is right now (clock time) + 100 real seconds, not 
	# CPU cycles
	endTime = (int(time.time()) + samples)
	state = False
	while (int(time.time()) < endTime):
		if ( GPIO.input(speedPin) == True ):
			state = True #closed
		# wait for switch for open
		if ((state == True) and (GPIO.input(speedPin) == False)):
			# State is now open!
			state = False
			# count it!
			counter = counter + 1
#	counter is the total number of pulses during the sample time
#	speed in MPH
	
	speed = ((counter / samples)  * rfactor)
	return (speed*0.44704)

# function writing in the MySQLdatabase
def writeToDb(speed, direction):
        c.execute('''INSERT INTO Wind (WindSpeed,WindDirection) VALUES (%s,%s)''',(speed,direction))
        conn.commit()	

# The following function needs to be chronologically adjusted
def main():
    speed = getSpeed()
    print (speed);
    direction = getDirection()
    print (direction);
    writeToDb(speed,direction)
if __name__ == '__main__':
        main()

# Original creator of the code :
#By Lars-Martin Hejll
#http://softwarefun.org
#windData.py
